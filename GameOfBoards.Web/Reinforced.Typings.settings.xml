<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<!--
		Hi! This is settings file for Reinforced.Typings.
		Since Reinforced.Typings is not a framework itself but build process extension,
		therefore settings file is basically piece of MSBuild script.
		This file is being imported to your .csproj during each build the same way
		as Reinforced.Typings.targets that is located in its package /build directory.

		Reinforced.Typings has completely few parameters. So, here we go.
	-->

	<PropertyGroup>

		<RtTargetFile>$(ProjectDir)Client\Shared\Contracts.ts</RtTargetFile>
		<RtConfigurationMethod>GameOfBoards.Web.Infrastructure.Typings.Typings.Configure</RtConfigurationMethod>

		<!--
			Boolean parameter that controls writing of "auto-generated warning" comment to each generated file.
			It meant the comment like "// This code was generated blah blah blah..."
			'true' (default) to write warning comment about auto-generated to every file.
			'false' to do not.
		-->
		<RtWriteWarningComment>true</RtWriteWarningComment>
		<RtTargetDirectory>$(ProjectDir)NotUsed</RtTargetDirectory>
		<!--
			Since .d.ts has a slightly different syntax than a regular .ts file, we have that
			boolean parameter that controls generation mode switch between .ts/.d.ts
			If true, export will be performed in .d.ts manner (only typings, declare module etc).
			Otherwise, export will be performed as regular .ts file
		-->
		<RtExportPureTypings>false</RtExportPureTypings>
		<RtDivideTypesAmongFiles>false</RtDivideTypesAmongFiles>
		<RtGenerateDocumentation>true</RtGenerateDocumentation>
		<RtBypassTypeScriptCompilation>false</RtBypassTypeScriptCompilation>
		<RtDisable>false</RtDisable>

	</PropertyGroup>

	<!--
		If you want Reinforced.Typings to lookup for attributed classes not only current
		project's assembly but also another assembly then you can specify it in RtAdditionalAssembly
		item group.

		Reinforced.Typings receives reference assemblies list from CoreCompile task so you
		can specify here assemblies from your project's references (with or without .dll extension).
		If desired assembly is not in references list of current project then you will have
		to specify full path to it.

	<ItemGroup>
		<RtAdditionalAssembly Include="My.Project.Assembly"/>
		<RtAdditionalAssembly Include="My.Project.Assembly.dll"/>
		<RtAdditionalAssembly Include="C:\Full\Path\To\Assembly\My.Project.Assembly.dll"/>
		<RtAdditionalAssembly Include="$(SolutionDir)\AnotherProject\bin\Debug\AnotherProject.dll"/>
	</ItemGroup>
	-->
</Project>